// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
#define DEBUG

using KSP;
using UnityEngine;
using Contracts;
using Contracts.Parameters;
using System;
using System.Collections.Generic;
using System.Linq;

namespace IoncrossKerbal.Contracts
{
	public class IonContractResupply : Contract
	{
		//
		private bool useExistingStation;

		private Vessel station = null;
		private List<ConfigNode> stationFleet = new List<ConfigNode>();

		private List<ProtoCrewMember> crewMembers;
		
		[SerializeField]
		protected CelestialBody targetBody;
		protected string stationID;
		Vessel v;
		// p
		public CelestialBody TargetBody { get { return this.targetBody; } }
		
		//
		// Methods
		//
		public IonContractResupply ()
		{
		}

		public string stationName = "Unnamed Station";

		public List<ConfigNode> GetProtoStation()
		{

			List<ConfigNode> Stations = new List<ConfigNode>();
			//Loops through all ION_CONTRACT_FLEET configNodes in the GameDatabase
			foreach (ConfigNode fleet in GameDatabase.Instance.GetConfigNodes("ION_CONTRACT_STATIONS"))
			{
#if DEBUG
				Debug.Log("IonContractResupply.GetStationFleet(): found ION_CONTRACT_STATIONS node");
#endif
				foreach(ConfigNode station_candidate in fleet.GetNodes ("VESSEL"))
				{
					Debug.Log("IonContractResupply.GetStationFleet(): found VESSEL node");
					Stations.Add (station_candidate);
				}
			}
			return Stations;
		}


		
		protected override bool Generate ()
		{
			if (this.prestige == Contract.ContractPrestige.Significant)
			{
				this.targetBody = FlightGlobals.Bodies [1];
			}
			else
			{
				if (this.prestige != Contract.ContractPrestige.Exceptional)
				{
					Debug.Log("IonContractResupply.Generate(): about to return false (failed prestige)");
					return false;
				}
				//List<CelestialBody> bodies = Contract.GetBodies ("some string goes here!!!", Contract.ProgressState.Complete, null);
				List<CelestialBody> bodies = Contract.GetBodies_Complete (true, false, "Orbit");

				//this.targetBody = bodies [Random.Range (0, bodies.Count)];
				this.targetBody = bodies[UnityEngine.Random.Range(0, bodies.Count)];
				if (this.targetBody == null)
				{
					this.targetBody = PSystemManager.Instance.localBodies [1];
				}
			}

			this.station = FindStation(this.targetBody);

			if ((object)this.station != null)
			{
				this.useExistingStation = true;
				this.stationName = this.station.vesselName;
			}
			else
			{
				Debug.Log ("IonContractResupply: No qualified pre-existing stations. Trying to spawn one.");
				this.stationFleet = this.GetProtoStation ();
				if (this.stationFleet.Count <= 0)
				{
					Debug.Log("IonContractResupply.Generate(): about to return false (empty fleet nodes; unable to spawn)");
					return false;
				}
				this.stationName = this.targetBody.bodyName + " Science Station";
			}

			base.SetExpiry ();
			base.SetDeadlineYears (0.1f, this.targetBody);
			base.SetFunds (10000f, 40000f, this.targetBody);
			base.SetReputation (20f, 20f, this.targetBody);

			// Add Contract Parameter(s)
			// set reputation for parameter(s)
			// set funds for parameter(s)
			Debug.Log("IonContractResupply.Generate(): about to return true");

			return true;
		}

		private Vessel FindStation(CelestialBody body)
		{
			List<Vessel> existingStations = new List<Vessel>();

			foreach (Vessel v in FlightGlobals.Vessels)
			{
				// This needs to be further checked against O2 storage capacy. Only use Stations that have a large O2 capacity for long term.
				if (v.mainBody == body && v.vesselType == VesselType.Station)
					existingStations.Add (v);
			}

			if (existingStations.Count > 0)
			{
				return existingStations[UnityEngine.Random.Range (0, existingStations.Count)];
			}
			else return null;
			//else
			//{
			//	List<ProtoVessel> fleet = GetProtoFleet ();
			//	return fleet[Random.Range (0, fleet.Count)];
			//}
			// vessel=newProtoVessel(vessel_node,FlightDriver.FlightStateCache);
		}
		
		protected override string GetDescription ()
		{
			return TextGen.GenerateBackStories (base.Agent.Name, base.Agent.GetMindsetString(), "station logistics", "dwindling supplies", "resupply mission", base.MissionSeed);
			// uncomment below when compiling for KSP 1.2.9+
			//return TextGen.GenerateBackStories("station logistics", base.agent.Name, "dwindling supplies", "resupply mission", base.MissionSeed, true, true, true);
		}
		
		protected override string GetHashString ()
		{
			return this.targetBody.name;
		}
		
		protected override string GetSynopsys ()
		{
			return "Resupply " + this.stationName + " in orbit around " + this.targetBody.theName;
		}
		
		protected override string GetTitle ()
		{
			return "Station resupply mission";
		}
		
		public override bool MeetRequirements ()
		{
			//return false;
			// return true for testing purposes. Make sure we can build O2 tanks and that we can orbit at least one planet
			Contract.GetBodies_Complete (true, false, "Orbit");
			bool result;
			try
			{
				result = ResearchAndDevelopment.PartTechAvailable (PartLoader.getPartInfoByName ("crewSupportTank.Large"));
			}
			catch(NullReferenceException)
			{
				Debug.Log ("IonContractResupply: Caught Null Reference Exception in result = ResearchAndDevelopment.PartTechAvailable (PartLoader.getPartInfoByName (''crewSupportTank_Large''));");
				result = false;
			}
			return result;
			//return ProgressTracking.Instance.NodeReached ("");
			//return ProgressTracking.Instance.NodeComplete (new string[]{"",""});
		}
		
		protected override string MessageCancelled ()
		{
			return "Your refusal to fulfill your obligations have left " 
				+ base.Agent.Name 
				+ " scrambling to find a supplier who can launch in time to resupply " 
				+ stationName 
				+ ", on time. How do you even sleep at nights?";
		}
		
		protected override string MessageCompleted ()
		{
			return "You successfully resupplied the station with oxygen and other supplies!";
		}
		
		protected override string MessageDeadlineExpired ()
		{
			return "You missed the deadline! Now <some agent text stuff> will have to find another supplier on short notice!";
		}
		
		protected override string MessageFailed ()
		{
			return "It was a simple task: Resupply " + stationName + ". Where did you go so wrong?";
		}

		protected override void OnAccepted ()
		{
			if (!useExistingStation)
			{
				uint uniqueFlightID = ShipConstruction.GetUniqueFlightID (HighLogic.CurrentGame.flightState);
				Debug.Log ("Generated flightID " + uniqueFlightID.ToString ());

				if (!(stationFleet.Count > 0))
					stationFleet = GetProtoStation ();
				if (!(stationFleet.Count > 0))
					Debug.Log ("ERROR: Unable to get stationFleet");

				ConfigNode[] station = stationFleet[UnityEngine.Random.Range(0, stationFleet.Count)].GetNodes ("PART");
				Debug.Log ("Got Station");
				//ProtoVessel pv = GetProtoFleet ()[0];

				//p.On
				//ProtoVessel.

				//pv.vesselName = stationName;
				//pv.pa


				//pv.orbitSnapShot.
				double lowOrbit = Math.Max (this.targetBody.Radius + this.targetBody.Radius * 0.15, this.targetBody.Radius + (double)this.targetBody.atmosphereDepth * 2.0);
				double highOrbit = Math.Max (this.targetBody.Radius + this.targetBody.Radius * 0.2, this.targetBody.Radius + (double)this.targetBody.atmosphereDepth * 2.3);

				Debug.Log ("Orbit Parameters = " + lowOrbit.ToString () + "-" + highOrbit.ToString ());

				ConfigNode[] parameters = new ConfigNode[]{	ProtoVessel.CreateDiscoveryNode (DiscoveryLevels.Unowned, UntrackedObjectClass.A, this.TimeDeadline * 2.0, this.TimeDeadline * 2.0)};

				Orbit orbit = Orbit.CreateRandomOrbitAround (this.targetBody, lowOrbit, highOrbit);

				ConfigNode protoVesselNode = ProtoVessel.CreateVesselNode (stationName,
				                                                           VesselType.Station,
				                                                           orbit,
				                                                           0,
				                                                           station,
				                                                           parameters
				                                                           );


				//Vessel v;

				//BoardAnyVessel parameter = this.GetParameter<BoardAnyVessel> (null);
				//parameter.AddKerbal (this.crewMember.name);
				//RecoverKerbal parameter2 = this.GetParameter<RecoverKerbal> (null);
				//parameter2.AddKerbal (this.crewMember.name);
				//ProtoVessel.
				//ConfigNode protoVesselNode = ProtoVessel.CreateVesselNode (this.stationName, 
				//                                                           VesselType.Station, 
				//                                                           Orbit.CreateRandomOrbitAround (this.targetBody, Math.Max (this.targetBody.Radius + this.targetBody.Radius * 0.15, this.targetBody.Radius + (double)this.targetBody.maxAtmosphereAltitude * 2.0), Math.Max (this.targetBody.Radius + this.targetBody.Radius * 0.2, this.targetBody.Radius + (double)this.targetBody.maxAtmosphereAltitude * 2.3)),
				//                                                           0, 
				//                                                           //new ConfigNode[]
				 //                                                          //{
				//	ProtoVessel.CreatePartNode (5, uniqueFlightID, new ProtoCrewMember[]{""})}, new ConfigNode[]
				//{
				//	ProtoVessel.CreateDiscoveryNode (DiscoveryLevels.Unowned, UntrackedObjectClass.A, this.TimeDeadline * 2.0, this.TimeDeadline * 2.0)
				//});
				ProtoVessel protoVessel = HighLogic.CurrentGame.AddVessel (protoVesselNode);
			}

		}

		protected override void OnDeclined ()
		{
		}

		protected override void OnGenerateFailed ()
		{
		}

		protected override void OnLoad (ConfigNode node)
		{
			if (node.HasValue ("body"))
			    this.targetBody =  FlightGlobals.fetch.bodies[int.Parse(node.GetValue("body"))];
			if (node.HasValue ("stationName"))
				this.stationName = node.GetValue ("stationName");
			if (node.HasValue ("stationID"))
				this.stationID = node.GetValue ("stationID");
		}

		protected override void OnOfferExpired ()
		{
		}
	
		protected override void OnParameterStateChange (ContractParameter p)
		{
			base.OnParameterStateChange (p);
		}

		protected override void OnSave (ConfigNode node)
		{
			// body
			// ship ID
			// ship name
			node.AddValue("body", this.targetBody.flightGlobalsIndex);
			node.AddValue ("stationName", this.stationName);
			node.AddValue ("stationID", this.stationID);
		}

		protected override void OnWithdrawn ()
		{
		}
	}
}